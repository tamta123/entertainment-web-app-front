import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

export const fetchMovies = createAsyncThunk('movies/fetchMovies', async () => { // createAsyncThunk generates pending, fulfilled and rejected action types, we can listen to this action typed with the reducer function and perform the neccessary state transition, this reducers are not generated by slice and has to be added by extra reducers
  try {
    const response = await axios.get('https://entertainment-web-app-back-production.up.railway.app//allMovies');
    console.log(response.data)
    return response.data;
  } catch (error) {
    throw error;
  } 
});


const moviesSlice = createSlice({
  name: 'movies',
  initialState: {
    data: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => { //extra reducers, allows to create slice to respond to other action types besides the types it has generated 
    builder
      .addCase(fetchMovies.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchMovies.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.data = action.payload;
      })
      .addCase(fetchMovies.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

export default moviesSlice.reducer;


// with redux-toolkit to create an async action, we make use of createAsyncThunk function.
//the function accept the action type as a first argument and a callback function as a second argument.
// a callback function will contain async logic and return a promise
//crateAsyncThunk will dispatch the promise lifecycle actions that we can listen to, using extraReducer
//the lifecycle include, pending(for when the request is made), include(for when the request succeed), rejected (for when request failed).  ,    
//within each reducer function you can perform the necessary state transition
//export the reduces as the default export and defatch the function as the named export 
//make sure to attach the reducer to the store and in index.js dispatch the async action